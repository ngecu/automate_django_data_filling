from __future__ import absolute_import, division, unicode_literals
from pip._vendor.six import text_type

from bisect import bisect_left

from ._base import Trie as ABCTrie


class Trie(ABCTrie):
    def __init__(self, data):
        if not all(isinstance(x, text_type) for x in data.keys()):
            raise TypeError("All keys must be strings")

        _data = data
        _keys = sorted(data.keys())
        _cachestr = ""
        _cachepoints = (0, len(data))

    def __contains__(self, key):
        return key in _data

    def __len__(self):
        return len(_data)

    def __iter__(self):
        return iter(_data)

    def __getitem__(self, key):
        return _data[key]

    def keys(self, prefix=None):
        if prefix is None or prefix == "" or not _keys:
            return set(_keys)

        if prefix.startswith(_cachestr):
            lo, hi = _cachepoints
            start = i = bisect_left(_keys, prefix, lo, hi)
        else:
            start = i = bisect_left(_keys, prefix)

        keys = set()
        if start == len(_keys):
            return keys

        while _keys[i].startswith(prefix):
            keys.add(_keys[i])
            i += 1

        _cachestr = prefix
        _cachepoints = (start, i)

        return keys

    def has_keys_with_prefix(self, prefix):
        if prefix in _data:
            return True

        if prefix.startswith(_cachestr):
            lo, hi = _cachepoints
            i = bisect_left(_keys, prefix, lo, hi)
        else:
            i = bisect_left(_keys, prefix)

        if i == len(_keys):
            return False

        return _keys[i].startswith(prefix)
